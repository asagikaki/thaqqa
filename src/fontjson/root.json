{
  "undefined": {
    "columnList": {
      "VersionMajor": {
        "name": "VersionMajor",
        "type": "INTEGER",
        "order": 400,
        "subtype": "none",
        "dev": false
      },
      "VersionMinor": {
        "name": "VersionMinor",
        "type": "INTEGER",
        "order": 401,
        "subtype": "none",
        "dev": false
      },
      "VersionPatch": {
        "name": "VersionPatch",
        "type": "INTEGER",
        "order": 402,
        "subtype": "none",
        "dev": false
      }
    },
    "data": {
      "undefined": {
        "VersionMajor": 0,
        "VersionMinor": 0,
        "VersionPatch": 0
      }
    }
  },
  "VOWEL": {
    "name": "VOWEL",
    "columnList": {
      "ID": {
        "name": "ID",
        "type": "INTEGER",
        "order": 0,
        "subtype": "ID",
        "dev": true
      },
      "Name": {
        "name": "Name",
        "type": "char",
        "order": 2,
        "subtype": "NAME",
        "dev": false
      },
      "LoadName": {
        "name": "LoadName",
        "type": "char",
        "order": 3,
        "subtype": "none",
        "dev": true
      },
      "SolGlyphNum": {
        "name": "SolGlyphNum",
        "type": "INTEGER",
        "order": 4,
        "subtype": "n>=0",
        "dev": false
      },
      "InitGlyphNum": {
        "name": "InitGlyphNum",
        "type": "INTEGER",
        "order": 5,
        "subtype": "n>=0",
        "dev": false
      },
      "MidGlyphNum": {
        "name": "MidGlyphNum",
        "type": "INTEGER",
        "order": 6,
        "subtype": "n>=0",
        "dev": false
      },
      "FinGlyphNum": {
        "name": "FinGlyphNum",
        "type": "INTEGER",
        "order": 7,
        "subtype": "n>=0",
        "dev": false
      },
      "isVowel": {
        "name": "isVowel",
        "type": "bool",
        "order": 8,
        "subtype": "none",
        "dev": false
      },
      "isNullVowel": {
        "name": "isNullVowel",
        "type": "bool",
        "order": 9,
        "subtype": "none",
        "dev": false
      },
      "hasGreedyBond": {
        "name": "hasGreedyBond",
        "type": "bool",
        "order": 10,
        "subtype": "none",
        "dev": false
      },
      "isBondtoPrev": {
        "name": "isBondtoPrev",
        "type": "bool",
        "order": 11,
        "subtype": "none",
        "dev": false
      },
      "isBondtoNext": {
        "name": "isBondtoNext",
        "type": "bool",
        "order": 12,
        "subtype": "none",
        "dev": false
      },
      "Order": {
        "name": "Order",
        "type": "INTEGER",
        "order": 1,
        "subtype": "none",
        "dev": false
      }
    },
    "data": {
      "0": {
        "ID": 0,
        "Name": "a",
        "LoadName": "a",
        "SolGlyphNum": 1,
        "InitGlyphNum": 1,
        "MidGlyphNum": 2,
        "FinGlyphNum": 4,
        "isVowel": true,
        "isNullVowel": true,
        "hasGreedyBond": true,
        "isBondtoPrev": true,
        "isBondtoNext": true,
        "Order": 0
      },
      "1": {
        "ID": 1,
        "Name": "abig",
        "LoadName": "abig",
        "SolGlyphNum": 2,
        "InitGlyphNum": 1,
        "MidGlyphNum": 2,
        "FinGlyphNum": 4,
        "isVowel": true,
        "isNullVowel": false,
        "hasGreedyBond": true,
        "isBondtoPrev": true,
        "isBondtoNext": true,
        "Order": 1
      },
      "2": {
        "ID": 2,
        "Name": "e",
        "LoadName": "e",
        "SolGlyphNum": 2,
        "InitGlyphNum": 1,
        "MidGlyphNum": 2,
        "FinGlyphNum": 4,
        "isVowel": true,
        "isNullVowel": false,
        "hasGreedyBond": true,
        "isBondtoPrev": true,
        "isBondtoNext": true,
        "Order": 2
      },
      "3": {
        "ID": 3,
        "Name": "i",
        "LoadName": "i",
        "SolGlyphNum": 2,
        "InitGlyphNum": 1,
        "MidGlyphNum": 2,
        "FinGlyphNum": 4,
        "isVowel": true,
        "isNullVowel": false,
        "hasGreedyBond": true,
        "isBondtoPrev": true,
        "isBondtoNext": true,
        "Order": 3
      },
      "4": {
        "ID": 4,
        "Name": "o",
        "LoadName": "o",
        "SolGlyphNum": 2,
        "InitGlyphNum": 1,
        "MidGlyphNum": 2,
        "FinGlyphNum": 4,
        "isVowel": true,
        "isNullVowel": false,
        "hasGreedyBond": true,
        "isBondtoPrev": true,
        "isBondtoNext": true,
        "Order": 4
      },
      "5": {
        "ID": 5,
        "Name": "u",
        "LoadName": "u",
        "SolGlyphNum": 2,
        "InitGlyphNum": 1,
        "MidGlyphNum": 2,
        "FinGlyphNum": 4,
        "isVowel": true,
        "isNullVowel": false,
        "hasGreedyBond": true,
        "isBondtoPrev": true,
        "isBondtoNext": true,
        "Order": 5
      },
      "6": {
        "ID": 6,
        "Name": "v",
        "LoadName": "v",
        "SolGlyphNum": 2,
        "InitGlyphNum": 1,
        "MidGlyphNum": 2,
        "FinGlyphNum": 4,
        "isVowel": true,
        "isNullVowel": false,
        "hasGreedyBond": true,
        "isBondtoPrev": true,
        "isBondtoNext": true,
        "Order": 6
      },
      "7": {
        "ID": 7,
        "Name": "omit",
        "LoadName": "omit",
        "SolGlyphNum": 1,
        "InitGlyphNum": 1,
        "MidGlyphNum": 2,
        "FinGlyphNum": 4,
        "isVowel": true,
        "isNullVowel": false,
        "hasGreedyBond": true,
        "isBondtoPrev": true,
        "isBondtoNext": true,
        "Order": 7
      },
      "8": {
        "ID": 8,
        "Name": "eold",
        "LoadName": "eold",
        "SolGlyphNum": 2,
        "InitGlyphNum": 1,
        "MidGlyphNum": 2,
        "FinGlyphNum": 4,
        "isVowel": true,
        "isNullVowel": false,
        "hasGreedyBond": true,
        "isBondtoPrev": true,
        "isBondtoNext": true,
        "Order": 8
      },
      "9": {
        "ID": 9,
        "Name": "iold",
        "LoadName": "iold",
        "SolGlyphNum": 2,
        "InitGlyphNum": 1,
        "MidGlyphNum": 2,
        "FinGlyphNum": 4,
        "isVowel": true,
        "isNullVowel": false,
        "hasGreedyBond": true,
        "isBondtoPrev": true,
        "isBondtoNext": true,
        "Order": 9
      },
      "10": {
        "ID": 10,
        "Name": "br",
        "LoadName": "br",
        "SolGlyphNum": 2,
        "InitGlyphNum": 1,
        "MidGlyphNum": 1,
        "FinGlyphNum": 1,
        "isVowel": false,
        "isNullVowel": false,
        "hasGreedyBond": false,
        "isBondtoPrev": true,
        "isBondtoNext": true,
        "Order": 10
      },
      "11": {
        "ID": 11,
        "Name": "hyphen",
        "LoadName": "hyphen",
        "SolGlyphNum": 1,
        "InitGlyphNum": 1,
        "MidGlyphNum": 1,
        "FinGlyphNum": 1,
        "isVowel": false,
        "isNullVowel": true,
        "hasGreedyBond": false,
        "isBondtoPrev": false,
        "isBondtoNext": false,
        "Order": 11
      }
    }
  },
  "CONSONANT": {
    "name": "CONSONANT",
    "columnList": {
      "ID": {
        "name": "ID",
        "type": "INTEGER",
        "order": 0,
        "subtype": "ID",
        "dev": true
      },
      "Name": {
        "name": "Name",
        "type": "char",
        "order": 2,
        "subtype": "NAME",
        "dev": false
      },
      "LoadName": {
        "name": "LoadName",
        "type": "char",
        "order": 3,
        "subtype": "none",
        "dev": false
      },
      "OnsetGlyphNum": {
        "name": "OnsetGlyphNum",
        "type": "INTEGER",
        "order": 4,
        "subtype": "n>=0",
        "dev": false
      },
      "CodaGlyphNum": {
        "name": "CodaGlyphNum",
        "type": "INTEGER",
        "order": 5,
        "subtype": "n>=0",
        "dev": false
      },
      "isBondAsFirst": {
        "name": "isBondAsFirst",
        "type": "bool",
        "order": 6,
        "subtype": "none",
        "dev": false
      },
      "isBondAsLast": {
        "name": "isBondAsLast",
        "type": "bool",
        "order": 7,
        "subtype": "none",
        "dev": false
      },
      "Order": {
        "name": "Order",
        "type": "INTEGER",
        "order": 1,
        "subtype": "none",
        "dev": false
      }
    },
    "data": {
      "0": {
        "ID": 0,
        "Name": "t",
        "LoadName": "t",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 2,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 0
      },
      "1": {
        "ID": 1,
        "Name": "k",
        "LoadName": "k",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 1
      },
      "2": {
        "ID": 2,
        "Name": "q",
        "LoadName": "q",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 2
      },
      "3": {
        "ID": 3,
        "Name": "c",
        "LoadName": "c",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 3
      },
      "4": {
        "ID": 4,
        "Name": "n",
        "LoadName": "n",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 4
      },
      "5": {
        "ID": 5,
        "Name": "ng",
        "LoadName": "ng",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 5
      },
      "6": {
        "ID": 6,
        "Name": "th",
        "LoadName": "th",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 6
      },
      "7": {
        "ID": 7,
        "Name": "s",
        "LoadName": "s",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 7
      },
      "8": {
        "ID": 8,
        "Name": "hy",
        "LoadName": "hy",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 8
      },
      "9": {
        "ID": 9,
        "Name": "kh",
        "LoadName": "kh",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 9
      },
      "10": {
        "ID": 10,
        "Name": "qh",
        "LoadName": "qh",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 10
      },
      "11": {
        "ID": 11,
        "Name": "h",
        "LoadName": "h",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 11
      },
      "12": {
        "ID": 12,
        "Name": "l",
        "LoadName": "l",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 12
      },
      "13": {
        "ID": 13,
        "Name": "tl",
        "LoadName": "tl",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 13
      },
      "14": {
        "ID": 14,
        "Name": "r",
        "LoadName": "r",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 14
      },
      "15": {
        "ID": 15,
        "Name": "w",
        "LoadName": "w",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 15
      },
      "16": {
        "ID": 16,
        "Name": "y",
        "LoadName": "y",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "isBondAsFirst": true,
        "isBondAsLast": true,
        "Order": 16
      },
      "17": {
        "ID": 17,
        "Name": "x",
        "LoadName": "x",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 0,
        "isBondAsFirst": true,
        "isBondAsLast": false,
        "Order": 17
      }
    }
  },
  "PUNCTUATION": {
    "name": "PUNCTUATION",
    "columnList": {
      "ID": {
        "name": "ID",
        "type": "INTEGER",
        "order": 0,
        "subtype": "ID",
        "dev": true
      },
      "Name": {
        "name": "Name",
        "type": "char",
        "order": 2,
        "subtype": "NAME",
        "dev": false
      },
      "LoadName": {
        "name": "LoadName",
        "type": "char",
        "order": 3,
        "subtype": "none",
        "dev": false
      },
      "GlyphNum": {
        "name": "GlyphNum",
        "type": "INTEGER",
        "order": 4,
        "subtype": "n>=0",
        "dev": false
      },
      "IsNewline": {
        "name": "IsNewline",
        "type": "bool",
        "order": 5,
        "subtype": "none",
        "dev": false
      },
      "Order": {
        "name": "Order",
        "type": "INTEGER",
        "order": 1,
        "subtype": "none",
        "dev": true
      }
    },
    "data": {
      "0": {
        "ID": 0,
        "Name": "comma",
        "LoadName": "comma",
        "GlyphNum": 1,
        "IsNewline": false,
        "Order": 0
      },
      "1": {
        "ID": 1,
        "Name": "period",
        "LoadName": "period",
        "GlyphNum": 1,
        "IsNewline": false,
        "Order": 1
      },
      "2": {
        "ID": 2,
        "Name": "space",
        "LoadName": "space",
        "GlyphNum": 1,
        "IsNewline": false,
        "Order": 2
      },
      "3": {
        "ID": 3,
        "Name": "newline",
        "LoadName": "NEWLINE",
        "GlyphNum": 1,
        "IsNewline": true,
        "Order": 3
      },
      "4": {
        "ID": 4,
        "Name": "question",
        "LoadName": "question",
        "GlyphNum": 2,
        "IsNewline": false,
        "Order": 0
      },
      "5": {
        "ID": 5,
        "Name": "exclamation",
        "LoadName": "exclamation",
        "GlyphNum": 2,
        "IsNewline": false,
        "Order": 0
      }
    }
  },
  "DIACRITIC_V": {
    "name": "DIACRITIC_V",
    "columnList": {
      "ID": {
        "name": "ID",
        "type": "INTEGER",
        "order": 0,
        "subtype": "ID",
        "dev": true
      },
      "Name": {
        "name": "Name",
        "type": "char",
        "order": 2,
        "subtype": "NAME",
        "dev": false
      },
      "LoadName": {
        "name": "LoadName",
        "type": "char",
        "order": 3,
        "subtype": "none",
        "dev": false
      },
      "SolGlyphNum": {
        "name": "SolGlyphNum",
        "type": "INTEGER",
        "order": 4,
        "subtype": "n>=0",
        "dev": false
      },
      "InitGlyphNum": {
        "name": "InitGlyphNum",
        "type": "INTEGER",
        "order": 5,
        "subtype": "n>=0",
        "dev": false
      },
      "MidGlyphNum": {
        "name": "MidGlyphNum",
        "type": "INTEGER",
        "order": 6,
        "subtype": "n>=0",
        "dev": false
      },
      "FinGlyphNum": {
        "name": "FinGlyphNum",
        "type": "INTEGER",
        "order": 7,
        "subtype": "n>=0",
        "dev": false
      },
      "x_Align": {
        "name": "x_Align",
        "type": "INTEGER",
        "order": 8,
        "subtype": "AligX",
        "dev": false
      },
      "y_Align": {
        "name": "y_Align",
        "type": "INTEGER",
        "order": 9,
        "subtype": "AligY",
        "dev": false
      },
      "Order": {
        "name": "Order",
        "type": "INTEGER",
        "order": 1,
        "subtype": "none",
        "dev": false
      }
    },
    "data": {}
  },
  "DIACRITIC_C": {
    "name": "DIACRITIC_C",
    "columnList": {
      "ID": {
        "name": "ID",
        "type": "INTEGER",
        "order": 0,
        "subtype": "ID",
        "dev": true
      },
      "Name": {
        "name": "Name",
        "type": "char",
        "order": 2,
        "subtype": "NAME",
        "dev": false
      },
      "LoadName": {
        "name": "LoadName",
        "type": "char",
        "order": 3,
        "subtype": "none",
        "dev": false
      },
      "OnsetGlyphNum": {
        "name": "OnsetGlyphNum",
        "type": "INTEGER",
        "order": 4,
        "subtype": "n>=0",
        "dev": false
      },
      "CodaGlyphNum": {
        "name": "CodaGlyphNum",
        "type": "INTEGER",
        "order": 5,
        "subtype": "n>=0",
        "dev": false
      },
      "x_Align": {
        "name": "x_Align",
        "type": "INTEGER",
        "order": 6,
        "subtype": "none",
        "dev": false
      },
      "y_Align": {
        "name": "y_Align",
        "type": "INTEGER",
        "order": 7,
        "subtype": "none",
        "dev": false
      },
      "Order": {
        "name": "Order",
        "type": "INTEGER",
        "order": 1,
        "subtype": "none",
        "dev": false
      }
    },
    "data": {
      "0": {
        "ID": 0,
        "Name": "d",
        "LoadName": "d",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "x_Align": 0,
        "y_Align": 1,
        "Order": 0
      },
      "1": {
        "ID": 1,
        "Name": "hd",
        "LoadName": "hd",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "x_Align": 1,
        "y_Align": 0,
        "Order": 1
      },
      "2": {
        "ID": 2,
        "Name": "sw",
        "LoadName": "sw",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "x_Align": 0,
        "y_Align": 1,
        "Order": 2
      },
      "3": {
        "ID": 3,
        "Name": "sy",
        "LoadName": "sy",
        "OnsetGlyphNum": 1,
        "CodaGlyphNum": 1,
        "x_Align": 1,
        "y_Align": 0,
        "Order": 3
      }
    }
  },
  "DIACRITIC_P": {
    "name": "DIACRITIC_P",
    "columnList": {
      "ID": {
        "name": "ID",
        "type": "INTEGER",
        "order": 0,
        "subtype": "ID",
        "dev": true
      },
      "Name": {
        "name": "Name",
        "type": "char",
        "order": 2,
        "subtype": "NAME",
        "dev": false
      },
      "LoadName": {
        "name": "LoadName",
        "type": "char",
        "order": 3,
        "subtype": "none",
        "dev": false
      },
      "GlyphNum": {
        "name": "GlyphNum",
        "type": "INTEGER",
        "order": 4,
        "subtype": "n>=0",
        "dev": false
      },
      "x_Align": {
        "name": "x_Align",
        "type": "INTEGER",
        "order": 5,
        "subtype": "AligX",
        "dev": false
      },
      "y_Align": {
        "name": "y_Align",
        "type": "INTEGER",
        "order": 6,
        "subtype": "AligY",
        "dev": false
      },
      "Order": {
        "name": "Order",
        "type": "INTEGER",
        "order": 1,
        "subtype": "none",
        "dev": false
      }
    },
    "data": {}
  },
  "PARSER": {
    "name": "PARSER",
    "columnList": {
      "ID": {
        "name": "ID",
        "type": "INTEGER",
        "order": 0,
        "subtype": "ID",
        "dev": true
      },
      "Pattern": {
        "name": "Pattern",
        "type": "char",
        "order": 1,
        "subtype": "LANG",
        "dev": false
      },
      "Order": {
        "name": "Order",
        "type": "INTEGER",
        "order": 2,
        "dev": false
      },
      "Priority": {
        "name": "Priority",
        "type": "INTEGER",
        "order": 3,
        "dev": false
      },
      "Name": {
        "name": "Name",
        "type": "char",
        "order": 4,
        "dev": true
      },
      "NameAlt": {
        "name": "NameAlt",
        "type": "char",
        "order": 5,
        "dev": false
      },
      "Parsed": {
        "name": "Parsed",
        "type": "char",
        "order": 6,
        "dev": false
      }
    },
    "data": {
      "0": {
        "ID": 0,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(A)",
        "NameAlt": "V(null,abig0)",
        "Parsed": "R\\(A\\)"
      },
      "1": {
        "ID": 1,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(a)",
        "NameAlt": "V(null,a0)",
        "Parsed": "R\\(a\\)"
      },
      "2": {
        "ID": 2,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(e)",
        "NameAlt": "V(null,e0)",
        "Parsed": "R\\(e\\)"
      },
      "3": {
        "ID": 3,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(i)",
        "NameAlt": "V(null,i0)",
        "Parsed": "R\\(i\\)"
      },
      "4": {
        "ID": 4,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(o)",
        "NameAlt": "V(null,o0)",
        "Parsed": "R\\(o\\)"
      },
      "5": {
        "ID": 5,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(u)",
        "NameAlt": "V(null,u0)",
        "Parsed": "R\\(u\\)"
      },
      "6": {
        "ID": 6,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "(R(v)|R(ö))",
        "NameAlt": "V(null,v0)",
        "Parsed": "(R\\(v\\)|R\\(ö\\))"
      },
      "7": {
        "ID": 7,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "(R(E)|R(ë))",
        "NameAlt": "V(null,eold0)",
        "Parsed": "(R\\(E\\)|R\\(ë\\))"
      },
      "8": {
        "ID": 8,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "(R(I)|R(ï))",
        "NameAlt": "V(null,iold0)",
        "Parsed": "(R\\(I\\)|R\\(ï\\))"
      },
      "9": {
        "ID": 9,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(t)",
        "NameAlt": "C(null,t0)",
        "Parsed": "R\\(t\\)"
      },
      "10": {
        "ID": 10,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(k)",
        "NameAlt": "C(null,k0)",
        "Parsed": "R\\(k\\)"
      },
      "11": {
        "ID": 11,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(q)",
        "NameAlt": "C(null,q0)",
        "Parsed": "R\\(q\\)"
      },
      "12": {
        "ID": 12,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(')",
        "NameAlt": "C(null,c0)",
        "Parsed": "R\\('\\)"
      },
      "13": {
        "ID": 13,
        "Pattern": "u",
        "Order": 80,
        "Priority": 6,
        "Name": "R(n)",
        "NameAlt": "V(null,v0)",
        "Parsed": "R\\(n\\)"
      },
      "14": {
        "ID": 14,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(t)R(h)",
        "NameAlt": "C(null,th0)",
        "Parsed": "R\\(t\\)R\\(h\\)"
      },
      "15": {
        "ID": 15,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(s)",
        "NameAlt": "C(null,s0)",
        "Parsed": "R\\(s\\)"
      },
      "16": {
        "ID": 16,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(h)R(y)",
        "NameAlt": "C(null,hy0)",
        "Parsed": "R\\(h\\)R\\(y\\)"
      },
      "17": {
        "ID": 17,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(k)R(h)",
        "NameAlt": "C(null,kh0)",
        "Parsed": "R\\(k\\)R\\(h\\)"
      },
      "18": {
        "ID": 18,
        "Pattern": "c",
        "Order": 0,
        "Priority": -2,
        "Name": "R(q)R(h)",
        "NameAlt": "C(null,qh0)",
        "Parsed": "R\\(q\\)R\\(h\\)"
      },
      "19": {
        "ID": 19,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(h)",
        "NameAlt": "C(null,h0)",
        "Parsed": "R\\(h\\)"
      },
      "20": {
        "ID": 20,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(d)R(h)",
        "NameAlt": "C(null,th0-d0)",
        "Parsed": "R\\(d\\)R\\(h\\)"
      },
      "21": {
        "ID": 21,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(z)",
        "NameAlt": "C(null,s0-d0)",
        "Parsed": "R\\(z\\)"
      },
      "22": {
        "ID": 22,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(z)R(h)",
        "NameAlt": "C(null,hy0-d0)",
        "Parsed": "R\\(z\\)R\\(h\\)"
      },
      "23": {
        "ID": 23,
        "Pattern": "c",
        "Order": 0,
        "Priority": -2,
        "Name": "R(g)R(h)",
        "NameAlt": "C(null,kh0-d0)",
        "Parsed": "R\\(g\\)R\\(h\\)"
      },
      "24": {
        "ID": 24,
        "Pattern": "c",
        "Order": 0,
        "Priority": -2,
        "Name": "R(r)R(h)",
        "NameAlt": "C(null,qh0-d0)",
        "Parsed": "R\\(r\\)R\\(h\\)"
      },
      "25": {
        "ID": 25,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(c)",
        "NameAlt": "C(null,h0-d0)",
        "Parsed": "R\\(c\\)"
      },
      "26": {
        "ID": 26,
        "Pattern": "u",
        "Order": 80,
        "Priority": 0,
        "Name": "R(l)",
        "NameAlt": "V(null,v0)C(null,l0)",
        "Parsed": "R\\(l\\)"
      },
      "27": {
        "ID": 27,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(r)",
        "NameAlt": "C(null,r0)",
        "Parsed": "R\\(r\\)"
      },
      "28": {
        "ID": 28,
        "Pattern": "c",
        "Order": 0,
        "Priority": -2,
        "Name": "R(t)R(l)",
        "NameAlt": "C(null,tl0)",
        "Parsed": "R\\(t\\)R\\(l\\)"
      },
      "29": {
        "ID": 29,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(y)",
        "NameAlt": "C(null,y0)",
        "Parsed": "R\\(y\\)"
      },
      "30": {
        "ID": 30,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(w)",
        "NameAlt": "C(null,w0)",
        "Parsed": "R\\(w\\)"
      },
      "31": {
        "ID": 31,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(g)",
        "NameAlt": "C(null,k0-d0)",
        "Parsed": "R\\(g\\)"
      },
      "32": {
        "ID": 32,
        "Pattern": "c",
        "Order": 10,
        "Priority": 0,
        "Name": "(V(*,a_)){2}(V(*,[_.Name!='a']_)|C(*)|P(*)|$)",
        "NameAlt": "$1C(null,c0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),a\\d+\\)){2}(V\\((?:init|mid|fin|sol|null),(?:abig|e|i|o|u|v|omit|eold|iold|br|hyphen)\\d+\\)|C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|$)"
      },
      "33": {
        "ID": 33,
        "Pattern": "c",
        "Order": 10,
        "Priority": 0,
        "Name": "(V(*,e_)){2}(V(*,[_.Name!='e']_)|C(*)|P(*)|$)",
        "NameAlt": "$1C(null,c0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),e\\d+\\)){2}(V\\((?:init|mid|fin|sol|null),(?:a|abig|i|o|u|v|omit|eold|iold|br|hyphen)\\d+\\)|C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|$)"
      },
      "34": {
        "ID": 34,
        "Pattern": "c",
        "Order": 10,
        "Priority": 0,
        "Name": "(V(*,i_)){2}(V(*,[_.Name!='i']_)|C(*)|P(*)|$)",
        "NameAlt": "$1C(null,c0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),i\\d+\\)){2}(V\\((?:init|mid|fin|sol|null),(?:a|abig|e|o|u|v|omit|eold|iold|br|hyphen)\\d+\\)|C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|$)"
      },
      "35": {
        "ID": 35,
        "Pattern": "c",
        "Order": 10,
        "Priority": 0,
        "Name": "(V(*,o_)){2}(V(*,[_.Name!='o']_)|C(*)|P(*)|$)",
        "NameAlt": "$1C(null,c0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),o\\d+\\)){2}(V\\((?:init|mid|fin|sol|null),(?:a|abig|e|i|u|v|omit|eold|iold|br|hyphen)\\d+\\)|C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|$)"
      },
      "36": {
        "ID": 36,
        "Pattern": "c",
        "Order": 10,
        "Priority": 0,
        "Name": "(V(*,u_)){2}(V(*,[_.Name!='u']_)|C(*)|P(*)|$)",
        "NameAlt": "$1C(null,c0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),u\\d+\\)){2}(V\\((?:init|mid|fin|sol|null),(?:a|abig|e|i|o|v|omit|eold|iold|br|hyphen)\\d+\\)|C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|$)"
      },
      "37": {
        "ID": 37,
        "Pattern": "c",
        "Order": 10,
        "Priority": 0,
        "Name": "(V(*,v_)){2}(V(*,[_.Name!='v']_)|C(*)|P(*)|$)",
        "NameAlt": "$1C(null,c0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),v\\d+\\)){2}(V\\((?:init|mid|fin|sol|null),(?:a|abig|e|i|o|u|omit|eold|iold|br|hyphen)\\d+\\)|C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|$)"
      },
      "38": {
        "ID": 38,
        "Pattern": "c",
        "Order": 10,
        "Priority": 0,
        "Name": "(V(*,eold_)){2}(V(*,[_.Name!='eold']_)|C(*)|P(*)|$)",
        "NameAlt": "$1C(null,c0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),eold\\d+\\)){2}(V\\((?:init|mid|fin|sol|null),(?:a|abig|e|i|o|u|v|omit|iold|br|hyphen)\\d+\\)|C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|$)"
      },
      "39": {
        "ID": 39,
        "Pattern": "c",
        "Order": 10,
        "Priority": 0,
        "Name": "(V(*,iold_)){2}(V(*,[_.Name!='iold']_)|C(*)|P(*)|$)",
        "NameAlt": "$1C(null,c0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),iold\\d+\\)){2}(V\\((?:init|mid|fin|sol|null),(?:a|abig|e|i|o|u|v|omit|eold|br|hyphen)\\d+\\)|C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|$)"
      },
      "40": {
        "ID": 40,
        "Pattern": "c",
        "Order": 10,
        "Priority": 0,
        "Name": "(V(*,abig_)){2}(V(*,[_.Name!='abig']_)|C(*)|P(*)|$)",
        "NameAlt": "$1C(null,c0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),abig\\d+\\)){2}(V\\((?:init|mid|fin|sol|null),(?:a|e|i|o|u|v|omit|eold|iold|br|hyphen)\\d+\\)|C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|$)"
      },
      "41": {
        "ID": 41,
        "Pattern": "c",
        "Order": 10,
        "Priority": 0,
        "Name": "(C(*,[_.Name!='c']_))C(*,c_)(C(*,[_.Name!='c']_))",
        "NameAlt": "$1$2",
        "Parsed": "(C\\((?:onset|coda|null),(?:t|k|q|n|ng|th|s|hy|kh|qh|h|l|tl|r|w|y|x)\\d+\\))C\\((?:onset|coda|null),c\\d+\\)(C\\((?:onset|coda|null),(?:t|k|q|n|ng|th|s|hy|kh|qh|h|l|tl|r|w|y|x)\\d+\\))"
      },
      "42": {
        "ID": 42,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(p)",
        "NameAlt": "C(null,t0-hd0)",
        "Parsed": "R\\(p\\)"
      },
      "43": {
        "ID": 43,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(h)R(p)",
        "NameAlt": "C(null,th0-hd0-sw0)",
        "Parsed": "R\\(h\\)R\\(p\\)"
      },
      "44": {
        "ID": 44,
        "Pattern": "o",
        "Order": 0,
        "Priority": -3,
        "Name": "R(h)R(p)R(y)",
        "NameAlt": "C(null,th0-hd0-sy0)",
        "Parsed": "R\\(h\\)R\\(p\\)R\\(y\\)"
      },
      "45": {
        "ID": 45,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(b)",
        "NameAlt": "C(null,t0-d0-hd0)",
        "Parsed": "R\\(b\\)"
      },
      "46": {
        "ID": 46,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(t)R(s)",
        "NameAlt": "C(null,tl0)",
        "Parsed": "R\\(t\\)R\\(s\\)"
      },
      "47": {
        "ID": 47,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(h)R(t)",
        "NameAlt": "C(null,tl0-hd0)",
        "Parsed": "R\\(h\\)R\\(t\\)"
      },
      "48": {
        "ID": 48,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(c)R(h)",
        "NameAlt": "C(null,tl0-hd0-sy0)",
        "Parsed": "R\\(c\\)R\\(h\\)"
      },
      "49": {
        "ID": 49,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(t)R(y)",
        "NameAlt": "C(null,t0-sy0)",
        "Parsed": "R\\(t\\)R\\(y\\)"
      },
      "50": {
        "ID": 50,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(d)",
        "NameAlt": "C(null,t0-d0)",
        "Parsed": "R\\(d\\)"
      },
      "51": {
        "ID": 51,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(k)R(y)",
        "NameAlt": "C(null,k0-sy0)",
        "Parsed": "R\\(k\\)R\\(y\\)"
      },
      "52": {
        "ID": 52,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(k)R(w)",
        "NameAlt": "C(null,k0-sw0)",
        "Parsed": "R\\(k\\)R\\(w\\)"
      },
      "53": {
        "ID": 53,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(q)R(w)",
        "NameAlt": "C(null,q0-sw0)",
        "Parsed": "R\\(q\\)R\\(w\\)"
      },
      "54": {
        "ID": 54,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(h)R(q)",
        "NameAlt": "C(null,q0-hd0)",
        "Parsed": "R\\(h\\)R\\(q\\)"
      },
      "55": {
        "ID": 55,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(m)",
        "NameAlt": "C(null,n0-hd0)",
        "Parsed": "R\\(m\\)"
      },
      "56": {
        "ID": 56,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(m)R(y)",
        "NameAlt": "C(null,n0-hd0-sy0)",
        "Parsed": "R\\(m\\)R\\(y\\)"
      },
      "57": {
        "ID": 57,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(n)R(y)",
        "NameAlt": "C(null,n0-sy0)",
        "Parsed": "R\\(n\\)R\\(y\\)"
      },
      "58": {
        "ID": 58,
        "Pattern": "o",
        "Order": 0,
        "Priority": -3,
        "Name": "R(n)R(g)R(y)",
        "NameAlt": "C(null,ng0-sy0)",
        "Parsed": "R\\(n\\)R\\(g\\)R\\(y\\)"
      },
      "59": {
        "ID": 59,
        "Pattern": "o",
        "Order": 0,
        "Priority": -3,
        "Name": "R(n)R(g)R(w)",
        "NameAlt": "C(null,ng0-sw0)",
        "Parsed": "R\\(n\\)R\\(g\\)R\\(w\\)"
      },
      "60": {
        "ID": 60,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(s)R(y)",
        "NameAlt": "C(null,s0-sy0)",
        "Parsed": "R\\(s\\)R\\(y\\)"
      },
      "61": {
        "ID": 61,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(h)R(w)",
        "NameAlt": "C(null,qh0-sw0)",
        "Parsed": "R\\(h\\)R\\(w\\)"
      },
      "62": {
        "ID": 62,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(r)R(y)",
        "NameAlt": "C(null,r0-sy0)",
        "Parsed": "R\\(r\\)R\\(y\\)"
      },
      "63": {
        "ID": 63,
        "Pattern": "o",
        "Order": 60,
        "Priority": 0,
        "Name": "(C(*)|V(*))R(h)",
        "NameAlt": "$1C(null,kh0)",
        "Parsed": "(C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))R\\(h\\)"
      },
      "64": {
        "ID": 64,
        "Pattern": "o",
        "Order": 60,
        "Priority": 1,
        "Name": "(^|P(*))R(h)",
        "NameAlt": "$1C(null,h0)",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))R\\(h\\)"
      },
      "65": {
        "ID": 65,
        "Pattern": "o",
        "Order": 60,
        "Priority": 2,
        "Name": "(^|P(*))R(n)(V(*,(?:a|e|i|o|u|v|eold|iold|abig)_)|C(*,c_)|R(l))",
        "NameAlt": "$1C(null,n0)$2",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))R\\(n\\)(V\\((?:init|mid|fin|sol|null),(?:a|e|i|o|u|v|eold|iold|abig)\\d+\\)|C\\((?:onset|coda|null),c\\d+\\)|R\\(l\\))"
      },
      "66": {
        "ID": 66,
        "Pattern": "o",
        "Order": 60,
        "Priority": 3,
        "Name": "(V(*,(?:a|e|i|o|u|v|eold|iold|abig)_)|R(l))R(n)(V(*,(?:a|e|i|o|u|v|eold|iold|abig)_)|R(l))",
        "NameAlt": "$1C(null,n0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:a|e|i|o|u|v|eold|iold|abig)\\d+\\)|R\\(l\\))R\\(n\\)(V\\((?:init|mid|fin|sol|null),(?:a|e|i|o|u|v|eold|iold|abig)\\d+\\)|R\\(l\\))"
      },
      "67": {
        "ID": 67,
        "Pattern": "o",
        "Order": 60,
        "Priority": 4,
        "Name": "(^|P(*))R(n)R(n)",
        "NameAlt": "$1C(null,n0)R(n)",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))R\\(n\\)R\\(n\\)"
      },
      "68": {
        "ID": 68,
        "Pattern": "o",
        "Order": 60,
        "Priority": 5,
        "Name": "(C(*))R(n)R(n)",
        "NameAlt": "$1R(n)C(null,n0)",
        "Parsed": "(C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))R\\(n\\)R\\(n\\)"
      },
      "69": {
        "ID": 69,
        "Pattern": "o",
        "Order": 70,
        "Priority": 0,
        "Name": "(V(*)|C(null,[_.Name!='c']_))C(null,c_)*(V(*)|C(null,[_.Name!='c']_))",
        "NameAlt": "$1$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|C\\(null,(?:t|k|q|n|ng|th|s|hy|kh|qh|h|l|tl|r|w|y|x)\\d+\\))C\\(null,c\\d+\\)*(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|C\\(null,(?:t|k|q|n|ng|th|s|hy|kh|qh|h|l|tl|r|w|y|x)\\d+\\))"
      },
      "70": {
        "ID": 70,
        "Pattern": "u",
        "Order": 0,
        "Priority": -1,
        "Name": "R( )",
        "NameAlt": "P(space0)",
        "Parsed": "R\\( \\)"
      },
      "71": {
        "ID": 71,
        "Pattern": "u",
        "Order": 0,
        "Priority": -1,
        "Name": "R(\\\")",
        "NameAlt": "V(null,br0)",
        "Parsed": "R\\(\\\"\\)"
      },
      "72": {
        "ID": 72,
        "Pattern": "u",
        "Order": 0,
        "Priority": -1,
        "Name": "R(\\.)",
        "NameAlt": "P(period0)",
        "Parsed": "R\\(\\.\\)"
      },
      "73": {
        "ID": 73,
        "Pattern": "u",
        "Order": 0,
        "Priority": -1,
        "Name": "R(,)",
        "NameAlt": "P(comma0)",
        "Parsed": "R\\(,\\)"
      },
      "74": {
        "ID": 74,
        "Pattern": "u",
        "Order": 0,
        "Priority": -1,
        "Name": "R(-)",
        "NameAlt": "V(null,hyphen0)",
        "Parsed": "R\\(-\\)"
      },
      "75": {
        "ID": 75,
        "Pattern": "u",
        "Order": 0,
        "Priority": -1,
        "Name": "R(\\n)",
        "NameAlt": "P(newline0)",
        "Parsed": "R\\(\\n\\)"
      },
      "76": {
        "ID": 76,
        "Pattern": "u",
        "Order": 70,
        "Priority": 1,
        "Name": "(V(*,[!_.isBondtoPrev&&!_.isBondtoNext]_))",
        "NameAlt": "Sep()$1Sep()",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:hyphen)\\d+\\))"
      },
      "77": {
        "ID": 77,
        "Pattern": "u",
        "Order": 70,
        "Priority": 2,
        "Name": "(V(*,[!_.isBondtoPrev&&_.isBondtoNext]_))",
        "NameAlt": "Sep()$1",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:（無し）)\\d+\\))"
      },
      "78": {
        "ID": 78,
        "Pattern": "u",
        "Order": 70,
        "Priority": 3,
        "Name": "(V(*,[_.isBondtoPrev&&!_.isBondtoNext]_))",
        "NameAlt": "$1Sep()",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:（無し）)\\d+\\))"
      },
      "79": {
        "ID": 79,
        "Pattern": "u",
        "Order": 70,
        "Priority": 4,
        "Name": "(V(*)|R(n)|R(l))(V(*)|R(n)|R(l))",
        "NameAlt": "$1Sep()$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|R\\(n\\)|R\\(l\\))(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|R\\(n\\)|R\\(l\\))"
      },
      "80": {
        "ID": 80,
        "Pattern": "u",
        "Order": 70,
        "Priority": 5,
        "Name": "(C(*))(C(*))",
        "NameAlt": "$1Sep()$2",
        "Parsed": "(C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))(C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))"
      },
      "81": {
        "ID": 81,
        "Pattern": "u",
        "Order": 70,
        "Priority": 6,
        "Name": "(V(*)|R(n)|R(l))(C(*))(V(*,[_.hasGreedyBond]_)|R(n)|R(l))",
        "NameAlt": "$1Sep()$2$3",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|R\\(n\\)|R\\(l\\))(C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))(V\\((?:init|mid|fin|sol|null),(?:a|abig|e|i|o|u|v|omit|eold|iold)\\d+\\)|R\\(n\\)|R\\(l\\))"
      },
      "82": {
        "ID": 82,
        "Pattern": "u",
        "Order": 70,
        "Priority": 7,
        "Name": "(V(*)|R(n)|R(l))(C(*))(V(*,[!_.hasGreedyBond]_))",
        "NameAlt": "$1$2Sep()$3",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|R\\(n\\)|R\\(l\\))(C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))(V\\((?:init|mid|fin|sol|null),(?:br|hyphen)\\d+\\))"
      },
      "83": {
        "ID": 83,
        "Pattern": "u",
        "Order": 70,
        "Priority": 8,
        "Name": "(Sep())+(P(*)+)(Sep())+",
        "NameAlt": "$2",
        "Parsed": "(Sep\\(\\))+(P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)+)(Sep\\(\\))+"
      },
      "84": {
        "ID": 84,
        "Pattern": "u",
        "Order": 70,
        "Priority": 9,
        "Name": "(Sep())+",
        "NameAlt": "Sep()",
        "Parsed": "(Sep\\(\\))+"
      },
      "85": {
        "ID": 85,
        "Pattern": "u",
        "Order": 80,
        "Priority": 1,
        "Name": "(^|P(*))R(n)(P(*)|$)",
        "NameAlt": "$1C(null,ng0)V(null,v0)C(null,ng0)$2",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))R\\(n\\)(P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|$)"
      },
      "86": {
        "ID": 86,
        "Pattern": "u",
        "Order": 80,
        "Priority": 2,
        "Name": "R(n)(Sep()C(*,(?:t|d|n|tl)_|(?:(?:t|tl|n)_-sy_)|(?:(?:t|th|s|hy)_-d_)|(?:tl_-sw_)))",
        "NameAlt": "V(null,v0)C(null,n0)$1",
        "Parsed": "R\\(n\\)(Sep\\(\\)C\\((?:onset|coda|null),(?:t|d|n|tl)\\d+|(?:(?:t|tl|n)\\d+-sy\\d+)|(?:(?:t|th|s|hy)\\d+-d\\d+)|(?:tl\\d+-sw\\d+)\\))"
      },
      "87": {
        "ID": 87,
        "Pattern": "u",
        "Order": 80,
        "Priority": 3,
        "Name": "R(n)(Sep()C(*,(?:(?:t|th|n)_-hd_)|(?:(?:t)_-d_-hd)_|(?:(?:tl|n)_-hd_-sy_)|(?:th_-hd_-sw_)))",
        "NameAlt": "V(null,v0)C(null,n0-hd0)$1",
        "Parsed": "R\\(n\\)(Sep\\(\\)C\\((?:onset|coda|null),(?:(?:t|th|n)\\d+-hd\\d+)|(?:(?:t)\\d+-d\\d+-hd)\\d+|(?:(?:tl|n)\\d+-hd\\d+-sy\\d+)|(?:th\\d+-hd\\d+-sw\\d+)\\))"
      },
      "88": {
        "ID": 88,
        "Pattern": "u",
        "Order": 80,
        "Priority": 4,
        "Name": "R(n)Sep()R(l)",
        "NameAlt": "V(null,v0)C(null,n0)Sep()C(null,l0)R(l)",
        "Parsed": "R\\(n\\)Sep\\(\\)R\\(l\\)"
      },
      "89": {
        "ID": 89,
        "Pattern": "u",
        "Order": 80,
        "Priority": 5,
        "Name": "R(n)((?:Sep()(?:C(*)|V(*)|P(*)))|$)",
        "NameAlt": "V(null,v0)C(null,ng0)$1",
        "Parsed": "R\\(n\\)((?:Sep\\(\\)(?:C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)))|$)"
      },
      "90": {
        "ID": 90,
        "Pattern": "u",
        "Order": 80,
        "Priority": 7,
        "Name": "(C(*,r_))R(l)",
        "NameAlt": "$1V(null,v0)C(null,r0)",
        "Parsed": "(C\\((?:onset|coda|null),r\\d+\\))R\\(l\\)"
      },
      "91": {
        "ID": 91,
        "Pattern": "u",
        "Order": 80,
        "Priority": 8,
        "Name": "(P(*)|Sep())R(l)(P(*)|Sep())",
        "NameAlt": "$1C(null,l0)V(null,v0)C(null,l0)$2",
        "Parsed": "(P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|Sep\\(\\))R\\(l\\)(P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|Sep\\(\\))"
      },
      "92": {
        "ID": 92,
        "Pattern": "u",
        "Order": 90,
        "Priority": 0,
        "Name": "C(*,(*))V((*),(*))C(*,(*))",
        "NameAlt": "S($2,$1,$3,$4)",
        "Parsed": "C\\((?:onset|coda|null),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)V\\(((?:init|mid|fin|sol|null)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)C\\((?:onset|coda|null),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "93": {
        "ID": 93,
        "Pattern": "u",
        "Order": 90,
        "Priority": 1,
        "Name": "V((*),(*))C(*,(*))",
        "NameAlt": "S($1,,$2,$3)",
        "Parsed": "V\\(((?:init|mid|fin|sol|null)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)C\\((?:onset|coda|null),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "94": {
        "ID": 94,
        "Pattern": "u",
        "Order": 90,
        "Priority": 2,
        "Name": "C(*,(*))V((*),(*))",
        "NameAlt": "S($2,$1,$3,)",
        "Parsed": "C\\((?:onset|coda|null),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)V\\(((?:init|mid|fin|sol|null)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "95": {
        "ID": 95,
        "Pattern": "u",
        "Order": 90,
        "Priority": 3,
        "Name": "V((*),(*))",
        "NameAlt": "S($1,,$2,)",
        "Parsed": "V\\(((?:init|mid|fin|sol|null)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "96": {
        "ID": 96,
        "Pattern": "u",
        "Order": 100,
        "Priority": 0,
        "Name": "Sep()",
        "NameAlt": "",
        "Parsed": "Sep\\(\\)"
      },
      "97": {
        "ID": 97,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(n)R(g)",
        "NameAlt": "C(null,ng0)",
        "Parsed": "R\\(n\\)R\\(g\\)"
      },
      "98": {
        "ID": 98,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(A)",
        "NameAlt": "V(null,abig0)",
        "Parsed": "R\\(A\\)"
      },
      "99": {
        "ID": 99,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(a)",
        "NameAlt": "V(null,a0)",
        "Parsed": "R\\(a\\)"
      },
      "100": {
        "ID": 100,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(e)",
        "NameAlt": "V(null,e0)",
        "Parsed": "R\\(e\\)"
      },
      "101": {
        "ID": 101,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(i)",
        "NameAlt": "V(null,i0)",
        "Parsed": "R\\(i\\)"
      },
      "102": {
        "ID": 102,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(o)",
        "NameAlt": "V(null,o0)",
        "Parsed": "R\\(o\\)"
      },
      "103": {
        "ID": 103,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(u)",
        "NameAlt": "V(null,u0)",
        "Parsed": "R\\(u\\)"
      },
      "104": {
        "ID": 104,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "(R(v)|R(ö))",
        "NameAlt": "V(null,v0)",
        "Parsed": "(R\\(v\\)|R\\(ö\\))"
      },
      "105": {
        "ID": 105,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "(R(E)|R(ë))",
        "NameAlt": "V(null,eold0)",
        "Parsed": "(R\\(E\\)|R\\(ë\\))"
      },
      "106": {
        "ID": 106,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "(R(I)|R(ï))",
        "NameAlt": "V(null,iold0)",
        "Parsed": "(R\\(I\\)|R\\(ï\\))"
      },
      "107": {
        "ID": 107,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(t)",
        "NameAlt": "C(null,t0)",
        "Parsed": "R\\(t\\)"
      },
      "108": {
        "ID": 108,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(k)",
        "NameAlt": "C(null,k0)",
        "Parsed": "R\\(k\\)"
      },
      "109": {
        "ID": 109,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(q)",
        "NameAlt": "C(null,q0)",
        "Parsed": "R\\(q\\)"
      },
      "110": {
        "ID": 110,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(')",
        "NameAlt": "C(null,c0)",
        "Parsed": "R\\('\\)"
      },
      "111": {
        "ID": 111,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(n)",
        "NameAlt": "C(null,n0)",
        "Parsed": "R\\(n\\)"
      },
      "112": {
        "ID": 112,
        "Pattern": "c",
        "Order": 0,
        "Priority": -2,
        "Name": "R(n)R(g)",
        "NameAlt": "C(null,ng0)",
        "Parsed": "R\\(n\\)R\\(g\\)"
      },
      "113": {
        "ID": 113,
        "Pattern": "c",
        "Order": 0,
        "Priority": -2,
        "Name": "R(t)R(h)",
        "NameAlt": "C(null,th0)",
        "Parsed": "R\\(t\\)R\\(h\\)"
      },
      "114": {
        "ID": 114,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(s)",
        "NameAlt": "C(null,s0)",
        "Parsed": "R\\(s\\)"
      },
      "115": {
        "ID": 115,
        "Pattern": "c",
        "Order": 0,
        "Priority": -2,
        "Name": "R(h)R(y)",
        "NameAlt": "C(null,hy0)",
        "Parsed": "R\\(h\\)R\\(y\\)"
      },
      "116": {
        "ID": 116,
        "Pattern": "c",
        "Order": 0,
        "Priority": -2,
        "Name": "R(k)R(h)",
        "NameAlt": "C(null,kh0)",
        "Parsed": "R\\(k\\)R\\(h\\)"
      },
      "117": {
        "ID": 117,
        "Pattern": "c",
        "Order": 0,
        "Priority": -2,
        "Name": "R(d)R(h)",
        "NameAlt": "C(null,th0-d0)",
        "Parsed": "R\\(d\\)R\\(h\\)"
      },
      "118": {
        "ID": 118,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(z)",
        "NameAlt": "C(null,s0-d0)",
        "Parsed": "R\\(z\\)"
      },
      "119": {
        "ID": 119,
        "Pattern": "c",
        "Order": 0,
        "Priority": -2,
        "Name": "R(z)R(h)",
        "NameAlt": "C(null,hy0-d0)",
        "Parsed": "R\\(z\\)R\\(h\\)"
      },
      "120": {
        "ID": 120,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(r)",
        "NameAlt": "C(null,r0)",
        "Parsed": "R\\(r\\)"
      },
      "121": {
        "ID": 121,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(l)",
        "NameAlt": "C(null,l0)",
        "Parsed": "R\\(l\\)"
      },
      "122": {
        "ID": 122,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(y)",
        "NameAlt": "C(null,y0)",
        "Parsed": "R\\(y\\)"
      },
      "123": {
        "ID": 123,
        "Pattern": "c",
        "Order": 0,
        "Priority": -1,
        "Name": "R(w)",
        "NameAlt": "C(null,w0)",
        "Parsed": "R\\(w\\)"
      },
      "124": {
        "ID": 124,
        "Pattern": "u",
        "Order": 70,
        "Priority": 6,
        "Name": "(V(*)|R(n)|R(l))(C(*))(V(*,[_.hasGreedyBond]_)|R(n)|R(l))",
        "NameAlt": "$1Sep()$2$3",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|R\\(n\\)|R\\(l\\))(C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))(V\\((?:init|mid|fin|sol|null),(?:a|abig|e|i|o|u|v|omit|eold|iold)\\d+\\)|R\\(n\\)|R\\(l\\))"
      },
      "125": {
        "ID": 125,
        "Pattern": "u",
        "Order": 70,
        "Priority": 7,
        "Name": "(V(*)|R(n)|R(l))(C(*))(V(*,[!_.hasGreedyBond]_))",
        "NameAlt": "$1$2Sep()$3",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|R\\(n\\)|R\\(l\\))(C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))(V\\((?:init|mid|fin|sol|null),(?:br|hyphen)\\d+\\))"
      },
      "126": {
        "ID": 126,
        "Pattern": "o",
        "Order": 0,
        "Priority": -2,
        "Name": "R(z)R(y)",
        "NameAlt": "C(null,s0-d0-sy0)",
        "Parsed": "R\\(z\\)R\\(y\\)"
      },
      "127": {
        "ID": 127,
        "Pattern": "o",
        "Order": 0,
        "Priority": -1,
        "Name": "R(f)",
        "NameAlt": "C(null,th0-hd0)",
        "Parsed": "R\\(f\\)"
      },
      "128": {
        "ID": 128,
        "Pattern": "o",
        "Order": 60,
        "Priority": 5,
        "Name": "R(n)R(n)",
        "NameAlt": "C(null,n0)R(n)",
        "Parsed": "R\\(n\\)R\\(n\\)"
      },
      "129": {
        "ID": 129,
        "Pattern": "o",
        "Order": 60,
        "Priority": 6,
        "Name": "(V(*)|R(l))R(n)(V(*)|R(l))",
        "NameAlt": "$1C(null,n0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|R\\(l\\))R\\(n\\)(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|R\\(l\\))"
      },
      "130": {
        "ID": 130,
        "Pattern": "o",
        "Order": 60,
        "Priority": 5,
        "Name": "R(n)R(n)",
        "NameAlt": "C(null,n0)R(n)",
        "Parsed": "R\\(n\\)R\\(n\\)"
      },
      "131": {
        "ID": 131,
        "Pattern": "o",
        "Order": 60,
        "Priority": 6,
        "Name": "(V(*)|R(l))R(n)(V(*)|R(l))",
        "NameAlt": "$1C(null,n0)$2",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|R\\(l\\))R\\(n\\)(V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|R\\(l\\))"
      },
      "132": {
        "ID": 132,
        "Pattern": "u",
        "Order": 0,
        "Priority": -1,
        "Name": "R(\\?)",
        "NameAlt": "P(question0)",
        "Parsed": "R\\(\\?\\)"
      },
      "133": {
        "ID": 133,
        "Pattern": "u",
        "Order": 0,
        "Priority": -1,
        "Name": "R(!)",
        "NameAlt": "P(exclamation0)",
        "Parsed": "R\\(!\\)"
      },
      "134": {
        "ID": 134,
        "Pattern": "u",
        "Order": 90,
        "Priority": -1,
        "Name": "(V(*,[!_.hasGreedyBond]_))C(*,(*))(P(*)|C(*)|Sep()|$)",
        "NameAlt": "$1S(null,,a0,$2)$3",
        "Parsed": "(V\\((?:init|mid|fin|sol|null),(?:br|hyphen)\\d+\\))C\\((?:onset|coda|null),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)(P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|Sep\\(\\)|$)"
      }
    }
  },
  "GSUB": {
    "name": "GSUB",
    "columnList": {
      "ID": {
        "name": "ID",
        "type": "INTEGER",
        "order": 0,
        "subtype": "ID",
        "dev": true
      },
      "Pattern": {
        "name": "Pattern",
        "type": "char",
        "order": 1,
        "subtype": "AligWhole",
        "dev": false
      },
      "Order": {
        "name": "Order",
        "type": "INTEGER",
        "order": 2,
        "dev": false
      },
      "Priority": {
        "name": "Priority",
        "type": "INTEGER",
        "order": 3,
        "dev": false
      },
      "Name": {
        "name": "Name",
        "type": "char",
        "order": 4,
        "dev": true
      },
      "NameAlt": {
        "name": "NameAlt",
        "type": "char",
        "order": 5,
        "dev": false
      },
      "Parsed": {
        "name": "Parsed",
        "type": "char",
        "order": 6,
        "dev": false
      }
    },
    "data": {
      "0": {
        "ID": 0,
        "Pattern": "u",
        "Order": 10,
        "Priority": 3,
        "Name": "S(fin,(t_-*),(.)1(-*),(t_-*))",
        "NameAlt": "S(fin,$1,$23$3,$4)",
        "Parsed": "S\\(fin,(t\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),([A-Za-z]+)1((?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),(t\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "1": {
        "ID": 1,
        "Pattern": "u",
        "Order": 10,
        "Priority": 2,
        "Name": "S(fin,(*),(.)0(-*),(t_-*))",
        "NameAlt": "S(fin,$1,$22$3,$4)",
        "Parsed": "S\\(fin,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),([A-Za-z]+)0((?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),(t\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "2": {
        "ID": 2,
        "Pattern": "u",
        "Order": 10,
        "Priority": 1,
        "Name": "S(fin,(t_-*),(.)0(-*),(*))",
        "NameAlt": "S(fin,$1,$21$3,$4)",
        "Parsed": "S\\(fin,(t\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),([A-Za-z]+)0((?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "3": {
        "ID": 3,
        "Pattern": "u",
        "Order": 10,
        "Priority": 0,
        "Name": "S(mid,(t_-*),(.)0(-*),(*))",
        "NameAlt": "S(mid,$1,$21$3,$4)",
        "Parsed": "S\\(mid,(t\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),([A-Za-z]+)0((?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "4": {
        "ID": 4,
        "Pattern": "h",
        "Order": 5,
        "Priority": 27,
        "Name": "S(null,(*),(br|omit)_,(*))",
        "NameAlt": "S(mid,$1,a_-*,,)S(sol,,$21,)S(mid,,a_-*,$3)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),(br|omit)\\d+,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "5": {
        "ID": 5,
        "Pattern": "h",
        "Order": 5,
        "Priority": 26,
        "Name": "S(null,,(br|omit)_,(*))",
        "NameAlt": "S(mid,,a_-*,,)S(sol,,$11,)S(mid,,a_-*,$2)",
        "Parsed": "S\\(null,,(br|omit)\\d+,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "6": {
        "ID": 6,
        "Pattern": "h",
        "Order": 5,
        "Priority": 25,
        "Name": "S(null,(*),iold_-*,(*))",
        "NameAlt": "S(init,$1,iold0,$2)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),iold\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "7": {
        "ID": 7,
        "Pattern": "h",
        "Order": 5,
        "Priority": 24,
        "Name": "S(null,,iold_-*,(*))",
        "NameAlt": "S(init,,iold0,$1)",
        "Parsed": "S\\(null,,iold\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "8": {
        "ID": 8,
        "Pattern": "h",
        "Order": 5,
        "Priority": 23,
        "Name": "S(null,(*),iold_-*,)",
        "NameAlt": "S(fin,$1,iold0,)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),iold\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "9": {
        "ID": 9,
        "Pattern": "h",
        "Order": 5,
        "Priority": 2,
        "Name": "S(null,(*),eold_-*,(*))",
        "NameAlt": "S(fin,$1,eold0,$2)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),eold\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "10": {
        "ID": 10,
        "Pattern": "h",
        "Order": 5,
        "Priority": 21,
        "Name": "S(null,,eold_-*,(*))",
        "NameAlt": "S(init,,eold0,$1)",
        "Parsed": "S\\(null,,eold\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "11": {
        "ID": 11,
        "Pattern": "h",
        "Order": 5,
        "Priority": 20,
        "Name": "S(null,(*),eold_-*,)",
        "NameAlt": "S(fin,$1,eold0,)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),eold\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "12": {
        "ID": 12,
        "Pattern": "h",
        "Order": 5,
        "Priority": 19,
        "Name": "S(null,(*),v_-*,(*))",
        "NameAlt": "S(fin,$1,v1,$2)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),v\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "13": {
        "ID": 13,
        "Pattern": "h",
        "Order": 5,
        "Priority": 18,
        "Name": "S(null,,v_-*,(*))",
        "NameAlt": "S(init,,v0,$1)",
        "Parsed": "S\\(null,,v\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "14": {
        "ID": 14,
        "Pattern": "h",
        "Order": 5,
        "Priority": 17,
        "Name": "S(null,(*),v_-*,)",
        "NameAlt": "S(fin,$1,v1,)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),v\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "15": {
        "ID": 15,
        "Pattern": "h",
        "Order": 5,
        "Priority": 16,
        "Name": "S(null,(*),u_-*,(*))",
        "NameAlt": "S(fin,$1,u1,$2)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),u\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "16": {
        "ID": 16,
        "Pattern": "h",
        "Order": 5,
        "Priority": 15,
        "Name": "S(null,,u_-*,(*))",
        "NameAlt": "S(init,,u0,$1)",
        "Parsed": "S\\(null,,u\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "17": {
        "ID": 17,
        "Pattern": "h",
        "Order": 5,
        "Priority": 14,
        "Name": "S(null,(*),u_-*,)",
        "NameAlt": "S(fin,$1,u0,)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),u\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "18": {
        "ID": 18,
        "Pattern": "h",
        "Order": 5,
        "Priority": 13,
        "Name": "S(null,(*),o_-*,(*))",
        "NameAlt": "S(init,$1,o0,$2)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),o\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "19": {
        "ID": 19,
        "Pattern": "h",
        "Order": 5,
        "Priority": 12,
        "Name": "S(null,,o_-*,(*))",
        "NameAlt": "S(init,,o0,$1)",
        "Parsed": "S\\(null,,o\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "20": {
        "ID": 20,
        "Pattern": "h",
        "Order": 5,
        "Priority": 11,
        "Name": "S(null,(*),o_-*,)",
        "NameAlt": "S(fin,$1,o0,)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),o\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "21": {
        "ID": 21,
        "Pattern": "h",
        "Order": 5,
        "Priority": 10,
        "Name": "S(null,(*),i_-*,(*))",
        "NameAlt": "S(fin,$1,i1,$2)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),i\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "22": {
        "ID": 22,
        "Pattern": "h",
        "Order": 5,
        "Priority": 9,
        "Name": "S(null,,i_-*,(*))",
        "NameAlt": "S(init,,i0,$1)",
        "Parsed": "S\\(null,,i\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "23": {
        "ID": 23,
        "Pattern": "h",
        "Order": 5,
        "Priority": 8,
        "Name": "S(null,(*),i_-*,)",
        "NameAlt": "S(fin,$1,i1,)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),i\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "24": {
        "ID": 24,
        "Pattern": "h",
        "Order": 5,
        "Priority": 7,
        "Name": "S(null,(*),e_-*,(*))",
        "NameAlt": "S(fin,$1,e0,$2)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),e\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "25": {
        "ID": 25,
        "Pattern": "h",
        "Order": 5,
        "Priority": 6,
        "Name": "S(null,,e_-*,(*))",
        "NameAlt": "S(fin,x0,e0,$1)",
        "Parsed": "S\\(null,,e\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "26": {
        "ID": 26,
        "Pattern": "h",
        "Order": 5,
        "Priority": 5,
        "Name": "S(null,(*),e_-*,)",
        "NameAlt": "S(fin,$1,e0,)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),e\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "27": {
        "ID": 27,
        "Pattern": "h",
        "Order": 5,
        "Priority": 4,
        "Name": "S(null,(*),(?:a|abig)_,(*))",
        "NameAlt": "S(mid,$1,a0,$2)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),(?:a|abig)\\d+,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "28": {
        "ID": 28,
        "Pattern": "h",
        "Order": 5,
        "Priority": 3,
        "Name": "S(null,,(?:a|abig)_,(*))",
        "NameAlt": "S(init,,abig0,$1)",
        "Parsed": "S\\(null,,(?:a|abig)\\d+,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "29": {
        "ID": 29,
        "Pattern": "h",
        "Order": 5,
        "Priority": 2,
        "Name": "S(null,(*),(?:a|abig)_,)",
        "NameAlt": "S(mid,$1,abig0,)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),(?:a|abig)\\d+,\\)"
      },
      "30": {
        "ID": 30,
        "Pattern": "h",
        "Order": 5,
        "Priority": 0,
        "Name": "S(null,,a_-*,)",
        "NameAlt": "S(sol,,abig0,)",
        "Parsed": "S\\(null,,a\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "31": {
        "ID": 31,
        "Pattern": "h",
        "Order": 5,
        "Priority": 1,
        "Name": "S(null,,(.)_(-*),)",
        "NameAlt": "S(sol,,$10$2,)",
        "Parsed": "S\\(null,,([A-Za-z]+)\\d+((?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),\\)"
      },
      "32": {
        "ID": 32,
        "Pattern": "v",
        "Order": 0,
        "Priority": 5,
        "Name": "S(null,(*),(+),(*))",
        "NameAlt": "S(mid,$1,$2,$3)",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "33": {
        "ID": 33,
        "Pattern": "v",
        "Order": 0,
        "Priority": 4,
        "Name": "S(null,(*),(+),(*))($|P(*))",
        "NameAlt": "S(fin,$1,$2,$3)$4",
        "Parsed": "S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)($|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))"
      },
      "34": {
        "ID": 34,
        "Pattern": "v",
        "Order": 0,
        "Priority": 3,
        "Name": "(^|P(*))S(null,(*),(+),(*))",
        "NameAlt": "$1S(init,$2,$3,$4)",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))S\\(null,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "35": {
        "ID": 35,
        "Pattern": "v",
        "Order": 0,
        "Priority": 2,
        "Name": "(^|P(*))S(null,(+),(+),(+))($|P(*))",
        "NameAlt": "$1S(mid,$2,$3,$4)$5",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))S\\(null,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)($|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))"
      },
      "36": {
        "ID": 36,
        "Pattern": "v",
        "Order": 0,
        "Priority": 2,
        "Name": "(^|P(*))S(null,,(+),(+))($|P(*))",
        "NameAlt": "$1S(init,,$2,$3)$4",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))S\\(null,,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)($|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))"
      },
      "37": {
        "ID": 37,
        "Pattern": "v",
        "Order": 0,
        "Priority": 1,
        "Name": "(^|P(*))S(null,(+),(+),)($|P(*))",
        "NameAlt": "$1S(fin,$2,$3,)$4",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))S\\(null,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)($|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))"
      },
      "38": {
        "ID": 38,
        "Pattern": "v",
        "Order": 0,
        "Priority": 0,
        "Name": "(^|P(*))S(null,,(+),)($|P(*))",
        "NameAlt": "$1S(sol,,$2,)$3",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))S\\(null,,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)($|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))"
      },
      "39": {
        "ID": 39,
        "Pattern": "v",
        "Order": 20,
        "Priority": -1,
        "Name": "S(*,,hyphen_-*,)",
        "NameAlt": "",
        "Parsed": "S\\((?:init|mid|fin|sol|null),,hyphen\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "40": {
        "ID": 40,
        "Pattern": "v",
        "Order": 20,
        "Priority": 0,
        "Name": "S(init,,a(_-*),)S((*),(*),a(_-*),(*))",
        "NameAlt": "S(init,,abig$1,)S($2,$3,abig$4,$5)",
        "Parsed": "S\\(init,,a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),\\)S\\(((?:init|mid|fin|sol|null)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "41": {
        "ID": 41,
        "Pattern": "v",
        "Order": 20,
        "Priority": 1,
        "Name": "S(init,,a(_-*),)S((*),(*),(*),(*))",
        "NameAlt": "S(init,,abig$1,)S($2,$3,$4,$5)",
        "Parsed": "S\\(init,,a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),\\)S\\(((?:init|mid|fin|sol|null)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "42": {
        "ID": 42,
        "Pattern": "v",
        "Order": 20,
        "Priority": 2,
        "Name": "S(init,,(*),)S((*),(*),a(_-*),(*))",
        "NameAlt": "S(init,,$1,)S($2,$3,abig$4,$5)",
        "Parsed": "S\\(init,,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),\\)S\\(((?:init|mid|fin|sol|null)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "43": {
        "ID": 43,
        "Pattern": "v",
        "Order": 20,
        "Priority": 3,
        "Name": "S((*),(*),a(_-*),(*))S(fin,,a(_-*),(*))",
        "NameAlt": "S($1,$2,abig$3,$4)S(fin,,abig$5,$6)",
        "Parsed": "S\\(((?:init|mid|fin|sol|null)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)S\\(fin,,a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "44": {
        "ID": 44,
        "Pattern": "v",
        "Order": 20,
        "Priority": 4,
        "Name": "S((*),(*),a(_-*),(*))S(fin,,(*),(*))",
        "NameAlt": "S($1,$2,abig$3,$4)S(fin,,$5,$6)",
        "Parsed": "S\\(((?:init|mid|fin|sol|null)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)S\\(fin,,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "45": {
        "ID": 45,
        "Pattern": "v",
        "Order": 20,
        "Priority": 5,
        "Name": "S(init,(+),(*),(*))S((*),,(*),(*))",
        "NameAlt": "S(init,$1,$2,$3)S($4,x0,$5,$6)",
        "Parsed": "S\\(init,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)S\\(((?:init|mid|fin|sol|null)),,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "46": {
        "ID": 46,
        "Pattern": "v",
        "Order": 20,
        "Priority": 6,
        "Name": "S((*),(*),(*),(+))S(fin,,(*),(*))",
        "NameAlt": "S($1,$2,$3,$4)S(fin,x0,$5,$6)",
        "Parsed": "S\\(((?:init|mid|fin|sol|null)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)S\\(fin,,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "47": {
        "ID": 47,
        "Pattern": "v",
        "Order": 20,
        "Priority": 7,
        "Name": "S((*),(x_),a(_-*),(*))",
        "NameAlt": "S($1,$2,abig$3,$4)",
        "Parsed": "S\\(((?:init|mid|fin|sol|null)),(x\\d+),a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "48": {
        "ID": 48,
        "Pattern": "u",
        "Order": 10,
        "Priority": 3,
        "Name": "S(fin,(*),(e|o|v|eold|iold)(_-*),t0(-*))",
        "NameAlt": "S(fin,$1,$2$3,t1$4)",
        "Parsed": "S\\(fin,((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),(e|o|v|eold|iold)(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),t0((?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "49": {
        "ID": 49,
        "Pattern": "v",
        "Order": 0,
        "Priority": 0,
        "Name": "(^|P(*))S(null,,(+),)($|P(*))",
        "NameAlt": "$1S(sol,,$2,)$3",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))S\\(null,,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)($|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))"
      },
      "50": {
        "ID": 50,
        "Pattern": "v",
        "Order": 0,
        "Priority": 6,
        "Name": "S(null,,(+),)",
        "NameAlt": "S(sol,,$1,)",
        "Parsed": "S\\(null,,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "51": {
        "ID": 51,
        "Pattern": "v",
        "Order": 0,
        "Priority": 2,
        "Name": "(^|P(*))S(null,,(+),(+))($|P(*))",
        "NameAlt": "$1S(init,,$2,$3)$4",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))S\\(null,,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)($|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))"
      },
      "52": {
        "ID": 52,
        "Pattern": "v",
        "Order": 0,
        "Priority": 1,
        "Name": "(^|P(*))S(null,(+),(+),)($|P(*))",
        "NameAlt": "$1S(fin,$2,$3,)$4",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))S\\(null,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)($|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))"
      },
      "53": {
        "ID": 53,
        "Pattern": "v",
        "Order": 0,
        "Priority": 2,
        "Name": "(^|P(*))S(null,(+),(+),(+))($|P(*))",
        "NameAlt": "$1S(mid,$2,$3,$4)$5",
        "Parsed": "(^|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))S\\(null,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)($|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))"
      },
      "54": {
        "ID": 54,
        "Pattern": "v",
        "Order": 0,
        "Priority": 6,
        "Name": "S(null,,(+),)",
        "NameAlt": "S(sol,,$1,)",
        "Parsed": "S\\(null,,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "55": {
        "ID": 55,
        "Pattern": "v",
        "Order": 0,
        "Priority": 6,
        "Name": "S(null,,(+),)",
        "NameAlt": "S(sol,,$1,)",
        "Parsed": "S\\(null,,([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),\\)"
      },
      "56": {
        "ID": 56,
        "Pattern": "h",
        "Order": 1,
        "Priority": 0,
        "Name": "P(exclamation0)",
        "NameAlt": "P(exclamation1)",
        "Parsed": "P\\(exclamation0\\)"
      },
      "57": {
        "ID": 57,
        "Pattern": "h",
        "Order": 1,
        "Priority": 0,
        "Name": "P(comma0)",
        "NameAlt": "P(comma1)",
        "Parsed": "P\\(comma0\\)"
      },
      "58": {
        "ID": 58,
        "Pattern": "h",
        "Order": 1,
        "Priority": 0,
        "Name": "P(question0)",
        "NameAlt": "P(question1)",
        "Parsed": "P\\(question0\\)"
      },
      "59": {
        "ID": 59,
        "Pattern": "v",
        "Order": 20,
        "Priority": 4,
        "Name": "S((*),(*),(*),(+))S(fin,,a(_-*),(*))",
        "NameAlt": "S($1,$2,$3,$4)S(fin,,abig$5,$6)",
        "Parsed": "S\\(((?:init|mid|fin|sol|null)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)S\\(fin,,a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*))\\)"
      },
      "60": {
        "ID": 60,
        "Pattern": "v",
        "Order": 20,
        "Priority": 2,
        "Name": "(S(*,*,*,*))S(mid,,a(_-*),(+))",
        "NameAlt": "$1S(mid,,abig$2,$3)",
        "Parsed": "(S\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))S\\(mid,,a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),([A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)"
      },
      "61": {
        "ID": 61,
        "Pattern": "v",
        "Order": 20,
        "Priority": 2,
        "Name": "(S(*,*,[_.Name!=\"a\"]_-*,*))S(mid,,a(_-*),)",
        "NameAlt": "$1S(mid,,abig$2,)",
        "Parsed": "(S\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),(?:abig|e|i|o|u|v|omit|eold|iold|br|hyphen)\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))S\\(mid,,a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),\\)"
      },
      "62": {
        "ID": 62,
        "Pattern": "h",
        "Order": 5,
        "Priority": 0,
        "Name": "S(null,,(br|hyphen)_(-*),)",
        "NameAlt": "S(sol,,$11,)",
        "Parsed": "S\\(null,,(br|hyphen)\\d+((?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),\\)"
      },
      "63": {
        "ID": 63,
        "Pattern": "h",
        "Order": 5,
        "Priority": 30,
        "Name": "(S(*,,hyphen_,)|V(*,hyphen_))",
        "NameAlt": "",
        "Parsed": "(S\\((?:init|mid|fin|sol|null),,hyphen\\d+,\\)|V\\((?:init|mid|fin|sol|null),hyphen\\d+\\))"
      },
      "64": {
        "ID": 64,
        "Pattern": "v",
        "Order": 20,
        "Priority": -2,
        "Name": "S((*),,a(_-*),)",
        "NameAlt": "S($1,,abig$2,)",
        "Parsed": "S\\(((?:init|mid|fin|sol|null)),,a(\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)),\\)"
      }
    }
  },
  "REGEX": {
    "name": "REGEX",
    "columnList": {
      "ID": {
        "name": "ID",
        "type": "INTEGER",
        "order": 0,
        "subtype": "ID",
        "dev": true
      },
      "Name": {
        "name": "Name",
        "type": "char",
        "order": 1,
        "subtype": "char",
        "dev": false
      },
      "Parsed": {
        "name": "Parsed",
        "type": "char",
        "order": 2,
        "subtype": "PARSED",
        "dev": false
      }
    },
    "data": {
      "0": {
        "ID": 0,
        "Name": "(L()L())",
        "Parsed": "(C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|Cd\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|Vd\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|Pd\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|S\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))(C\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|V\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|Cd\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|Vd\\((?:onset|coda|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|P\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|Pd\\((?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)|S\\((?:init|mid|fin|sol|null),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*),(?:|[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\))"
      },
      "1": {
        "ID": 1,
        "Name": "Seperate",
        "Parsed": "Sep\\(\\)"
      },
      "2": {
        "ID": 2,
        "Name": "P(*)",
        "Parsed": "^P\\(([A-Za-z]+)"
      },
      "3": {
        "ID": 3,
        "Name": "*(sol",
        "Parsed": "^(((P|Pd)\\()|((S|V|Vd)\\(sol,))"
      },
      "4": {
        "ID": 4,
        "Name": "h|u",
        "Parsed": "h|u"
      },
      "5": {
        "ID": 5,
        "Name": "v|u",
        "Parsed": "v|u"
      },
      "6": {
        "ID": 6,
        "Name": "extract_name",
        "Parsed": "^([A-Za-z]+)"
      },
      "7": {
        "ID": 7,
        "Name": "c|u",
        "Parsed": "c|u"
      },
      "8": {
        "ID": 8,
        "Name": "o|u",
        "Parsed": "o|u"
      },
      "9": {
        "ID": 9,
        "Name": "Sep_Parser",
        "Parsed": "(.|\n)"
      },
      "10": {
        "ID": 10,
        "Name": "Sep_SVG",
        "Parsed": "( |,)+"
      },
      "11": {
        "ID": 11,
        "Name": "P(newline)",
        "Parsed": "P\\((?:newline)\\d+(?:|-[A-Za-z]+\\d+(?:-[A-Za-z]+\\d+)*)\\)"
      }
    }
  }
}